# This pipeline is for CI/CD
parameters:
- name: workspace
  displayName: Terraform Workspace
  type: string
  default: ci
  values:
  - ci
  - ci31
  - cd
  - cd1
  - cd2
  - cd3
  - cd3
  - test
  - test1
  - test2
  - test3

name: $(Date:yyyyMMdd)$(Rev:.r)-$(Build.DefinitionVersion)-$(SourceBranchName)-${{ parameters.workspace }}-$(Build.BuildId)

trigger: none

pr:
  autoCancel: false
  branches:
    include:
    - '*'
  drafts: false
  paths:
    exclude:
    - '.devcontainer/**'  
    - 'visuals/**'  
    - '*.md'  

schedules:
- cron: '0 0 * * Mon,Thu'
  displayName: 'Bi-weekly build (UTC)'
  # Run if there are no changes
  always: 'true'
  branches:
    include:
    - main

variables:
- name: ARM_USE_AZUREAD
  value: 'true'
- name: ARM_USE_CLI
  value: 'true'
- name: AZURE_CORE_ONLY_SHOW_ERRORS
  value: 'true'
- name: AZURE_EXTENSION_USE_DYNAMIC_INSTALL
  value: 'yes_without_prompt'
- name: 'imageRepository'
  value: 'pipelineagent/ubuntu-agent'
- name: 'pool'
  value: 'Azure Pipelines'
- name: 'identityScriptDirectory'
  value: '$(Build.SourcesDirectory)/scripts/identity/scripts/azure-devops'
- name: 'scriptDirectory'
  value: '$(Build.SourcesDirectory)/scripts'
- name: 'terraformDirectory'
  value: '$(Build.SourcesDirectory)/terraform'
- name: 'TF_IN_AUTOMATION'
  value: 'true'
- name: 'TF_INPUT'
  value: 0
- name: 'TF_WORKSPACE'
  value: '${{ parameters.workspace }}'
- name: 'vmImage'
  value: 'ubuntu-latest'
- group: 'pipeline-container-agents' # shared with terraform-ci.yml

jobs:    
- job: provision

  pool:
    name: '$(pool)'
    vmImage: $(vmImage)

  steps:
  - checkout: self
    submodules: true

  - task: TerraformInstaller@0
    displayName: 'Install Terraform'
    inputs:
      terraformVersion: 'latest'

  # - task: TerraformTaskV4@4
  #   displayName: Terraform Init
  #   inputs:
  #     provider: 'azurerm'
  #     command: 'init'
  #     backendServiceArm: '$(subscriptionConnection)'
  #     backendAzureRmResourceGroupName: '$(TF_STATE_BACKEND_RESOURCE_GROUP_NAME)'
  #     backendAzureRmStorageAccountName: '$(TF_STATE_BACKEND_STORAGE_ACCOUNT_NAME)'
  #     backendAzureRmContainerName: '$(TF_STATE_BACKEND_STORAGE_CONTAINER_NAME)'
  #     backendAzureRmKey: 'terraform.tfstate'
  #     workingDirectory: '$(terraformDirectory)'
  #   env:
  #     ARM_USE_AZUREAD: true

  - task: AzureCLI@2
    displayName: 'Terraform init'
    inputs:
      azureSubscription: '$(subscriptionConnection)'
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |
        Copy-Item backend.tf.sample backend.tf
        # $env:ARM_OIDC_TOKEN = $env:idToken
        # $env:ARM_USE_OIDC = (![string]::IsNullOrEmpty($env:idToken)).ToString().ToLower()
        # $env:ARM_SAS_TOKEN=$(az storage container generate-sas -n $env:TF_STATE_BACKEND_STORAGE_CONTAINER_NAME --as-user --auth-mode login --account-name $env:TF_STATE_BACKEND_STORAGE_ACCOUNT_NAME --permissions acdlrw --expiry (Get-Date).AddDays(7).ToString("yyyy-MM-dd") -o tsv)
        # Write-Host "##vso[task.setvariable variable=ARM_SAS_TOKEN;]${env:ARM_SAS_TOKEN}"


        terraform init -backend-config="container_name=$(TF_STATE_BACKEND_STORAGE_CONTAINER_NAME)" `
                       -backend-config="key=terraform.tfstate" `
                       -backend-config="resource_group_name=$(TF_STATE_BACKEND_RESOURCE_GROUP_NAME)" `
                       -backend-config="storage_account_name=$(TF_STATE_BACKEND_STORAGE_ACCOUNT_NAME)" `
                       -backend-config="client_id=${env:servicePrincipalId}" `
                       -backend-config="client_secret=${env:servicePrincipalKey}" `
                       -backend-config="oidc_token=${env:idToken}" `
                       -backend-config="subscription_id=$(az account show --query id -o tsv)" `
                       -backend-config="tenant_id=${env:tenantId}"
      addSpnToEnvironment: true
      failOnStandardError: true
      workingDirectory: '$(terraformDirectory)'
    # env:
      # ARM_USE_AZUREAD: true

  - task: AzureCLI@2
    displayName: '$(subscriptionConnection)'
    inputs:
      # addSpnToEnvironment: true
      azureSubscription: $(subscriptionConnection)
      failOnStandardError: true
      powerShellIgnoreLASTEXITCODE: false
      powerShellErrorActionPreference: Stop
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |
        $stopwatch = [system.diagnostics.stopwatch]::StartNew()
        do {
          Write-Host "terraform output"
          terraform output
          Write-Host "terraform state pull"
          terraform state pull

          Write-Host "Elapsed time: $($stopwatch.Elapsed.TotalMinutes) minutes, sleeping for 1 minutes..."
          Start-Sleep -Seconds (60 * 1)
        } while ($stopwatch.Elapsed.TotalMinutes -lt (30-1-1))
      workingDirectory: '$(terraformDirectory)'

  - task: AzureCLI@2
    name: terraformVariables
    displayName: 'Terraform output'
    inputs:
      azureSubscription: '$(subscriptionConnection)'
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |
        terraform output
      failOnStandardError: true
      workingDirectory: '$(terraformDirectory)'
    # env:
      # ARM_USE_CLI: true

  - task: AzureCLI@2
    displayName: 'Create Terraform workspace'
    inputs:
      azureSubscription: '$(subscriptionConnection)'
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |
        $env:TF_WORKSPACE = $null
        terraform workspace select -or-create=true $(TF_WORKSPACE)
      useGlobalConfig: true
      failOnStandardError: true
      workingDirectory: '$(terraformDirectory)'
    # env:
      # ARM_USE_CLI: true

  - task: AzureCLI@2
    displayName: 'Terraform state'
    inputs:
      azureSubscription: '$(subscriptionConnection)'
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |
        # $(identityScriptDirectory)/set_terraform_azurerm_vars.ps1
        terraform output
 
        $terraformState = (terraform state pull | ConvertFrom-Json)
        # if ($terraformState.resources) {
          Write-Host "Clearing Terraform state in workspace ${env:TF_WORKSPACE}..."
          $terraformState.outputs = New-Object PSObject # Empty output
          $terraformState.resources = @() # No resources
          $terraformState.serial++
          $terraformState | ConvertTo-Json | terraform state push -
        # } else {
          # Write-Host "No resources in Terraform state in workspace ${env:TF_WORKSPACE}..."
        # }
        terraform state pull 
      failOnStandardError: true
      workingDirectory: '$(terraformDirectory)'
    # env:
      # ARM_USE_AZUREAD: true
      # ARM_USE_CLI: true
