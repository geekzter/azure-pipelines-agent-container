# This pipeline is for CI/CD
parameters:
- name: workspace
  displayName: Terraform Workspace
  type: string
  default: ci
  values:
  - ci
  - cd
  - cd1
  - cd2
  - cd3
  - cd3
  - test
  - test1
  - test2
  - test3
- name: buildImage
  displayName: Build agent image
  type: boolean
  default: true
- name: clear
  displayName: Clear Terraform state
  type: boolean
  default: false
- name: unpinTerraform
  displayName: Unpin Terraform version
  type: boolean
  default: false
- name: containerEngine
  displayName: Container Engine (ACA/AKS)
  type: string
  default: Both
  values:
  - None
  - Container App
  - Kubernetes 
  - Both
- name: networkType
  displayName: Network type
  type: string
  default: NATGateway
  values:
  - None
  - NoGateway
  - NATGateway
  - Firewall 
- name: deployBastion
  displayName: Deploy bastion host
  type: boolean
  default: false
- name: retryCount
  displayName: Task retry count
  type: number
  default: 1
- name: destroy
  displayName: Destroy Infrastructure
  type: string
  default: 'If no prior resources exist'
  values:
  - Always
  - 'If no prior resources exist'
  - Never 
  - 'On failure'
  - 'On success'

name: $(Date:yyyyMMdd)$(Rev:.r)-$(Build.DefinitionVersion)-$(SourceBranchName)-${{ parameters.workspace }}-$(Build.BuildId)

trigger: none

pr:
  autoCancel: false
  branches:
    include:
    - '*'
  drafts: false
  paths:
    exclude:
    - '.devcontainer/**'  
    - 'visuals/**'  
    - '*.md'  

schedules:
- cron: '0 0 * * Mon,Thu'
  displayName: 'Bi-weekly build (UTC)'
  # Run if there are no changes
  always: 'true'
  branches:
    include:
    - main

variables:
- group: 'build-container-agent-image' # shared with build-image.yml
  # should contain:
  # containerRegistry -> name of Container Registry Service Connection
- group: 'pipeline-container-agents' # shared with terraform-ci.yml
  # should contain:
  # subscriptionConnection -> name of Azure Registry Service Connection
  # TF_STATE_RESOURCE_GROUP_NAME, TF_STATE_STORAGE_ACCOUNT_NAME, TF_STATE_CONTAINER_NAME -> Terraform azurerm backend
  # (See https://developer.hashicorp.com/terraform/language/settings/backends/azurerm)
  # TF_VAR_agent_identity_resource_id -> Resource id of pre-created User-assigned Managed Identity used to access Container Registry
  # TF_VAR_container_registry_id -> Resource id of pre-created Container Registry
  # TF_VAR_devops_pat -> Personal Access Token used by agent to register itself, requires Agent Pools read & manage scope.
- name: AZURE_CORE_ONLY_SHOW_ERRORS
  value: 'true'
- name: AZURE_EXTENSION_USE_DYNAMIC_INSTALL
  value: 'yes_without_prompt'
- name: 'correlationCapability'
  value: '$(System.CollectionUri)$(System.TeamProject)#$(Build.DefinitionName)#$(TF_WORKSPACE)'
- name: 'jobTimeOutMinutes'
  value: 60
- name: date
  value: $[format('{0:yyyyMMdd}', pipeline.startTime)]
- name: 'pool'
  value: 'Azure Pipelines'
- name: 'scriptDirectory'
  value: '$(Build.SourcesDirectory)/scripts'
- name: 'tags'
  value: 'latest'
- name: 'terraformArtifactName'
  value: 'terraform$(System.PlanId)'
- name: 'terraformDirectory'
  value: '$(Build.SourcesDirectory)/terraform'
- name: 'TF_IN_AUTOMATION'
  value: 'true'
- name: 'TF_INPUT'
  value: 0
- name: 'TF_VAR_configure_access_control'
  value: 'false' # Assume Azure Service Connection identity is not in Azure Owner role
- name: 'TF_VAR_container_repository'
  value: 'pipelineagent/ubuntu'
- name: 'TF_VAR_deploy_aks'
  value: ${{ lower(or(eq(parameters.containerEngine, 'Kubernetes'),eq(parameters.containerEngine, 'Both'))) }}
- name: 'TF_VAR_deploy_bastion'
  value: '${{ lower(parameters.deployBastion) }}'
- name: 'TF_VAR_deploy_container_app'
  value: ${{ lower(or(eq(parameters.containerEngine, 'Container App'),eq(parameters.containerEngine, 'Both'))) }}
- name: 'TF_VAR_deploy_network'
  value: ${{ lower(ne(parameters.networkType, 'None')) }}
- name: 'TF_VAR_devops_project'
  value: '$(System.TeamProject)'
- name: 'TF_VAR_devops_url'
  value: '$(System.CollectionUri)'
- ${{ if ne(parameters.networkType, 'None') }}:
  - name: 'TF_VAR_gateway_type'
    value: '${{ parameters.networkType }}'
- name: 'TF_VAR_environment_variables'
  value: '{PIPELINE_DEMO_JOB_CAPABILITY_ACA="$(correlationCapability)"}'
- name: 'TF_VAR_pipeline_agent_pool_id'
  value: 1
- name: 'TF_VAR_pipeline_agent_pool_name'
  value: 'Default'
- name: 'TF_VAR_repository'
  value: 'azure-pipelines-container-agent'
- name: 'TF_VAR_resource_suffix'
  value: '$(Build.BuildId)'
- name: 'TF_VAR_run_id'
  value: '$(Build.BuildId)'
- name: 'TF_WORKSPACE'
  value: '${{ parameters.workspace }}'
- name: 'vmImage'
  value: 'ubuntu-latest'

jobs:    
- ${{ if parameters.buildImage }}:
  - job: buildImage
    displayName: 'Build Container Agent image'
    timeoutInMinutes: $[ variables['jobTimeOutMinutes'] ]

    pool:
      name: '$(pool)'
      vmImage: $(vmImage)

    steps:
    - task: Docker@2
      displayName: Build image
      inputs:
        command: build
        containerRegistry: '$(containerRegistry)'
        repository: $(TF_VAR_container_repository)
        tags: |
          latest
          $(date)

    - task: Docker@2
      displayName: Push image
      inputs:
        command: push
        containerRegistry: '$(containerRegistry)'
        repository: $(TF_VAR_container_repository)
        tags: |
          latest
          $(date)

- job: provision
  ${{ if parameters.buildImage }}:
    dependsOn: buildImage
  ${{ if eq(parameters.containerEngine, 'Container App') }}:
    displayName: 'Provision Container App infrastructure'
  ${{ if eq(parameters.containerEngine, 'Kubernetes') }}:
    displayName: 'Provision Kubernetes (AKS) infrastructure'
  ${{ if eq(parameters.containerEngine, 'Both') }}:
    displayName: 'Provision Container App and Kubernetes (AKS) infrastructure'
  timeoutInMinutes: $[ variables['jobTimeOutMinutes'] ]

  pool:
    name: '$(pool)'
    vmImage: $(vmImage)

  steps:
  - ${{ if not(parameters.unpinTerraform) }}:
    - pwsh: |
        $terraformVersion = (Get-Content .terraform-version)
        Write-Host "##vso[task.setvariable variable=version;isOutput=true]${terraformVersion}"
        Copy-Item backend.tf.sample backend.tf
      name: terraformConfig
      displayName: 'Prepare Terraform config (pinned)'
      workingDirectory: '$(terraformDirectory)'

  - ${{ if parameters.unpinTerraform }}:
    - pwsh: |
        (Get-Content ./terraform.tf) -replace "required_version *= `" *(~>|=) +",'required_version = ">= ' | Out-File terraform.tf
        Get-Content ./terraform.tf
        Write-Host "##vso[task.setvariable variable=version;isOutput=true]latest"
        Copy-Item backend.tf.sample backend.tf
      name: terraformConfig
      displayName: 'Prepare Terraform config (unpinned/latest)'
      workingDirectory: '$(terraformDirectory)'

  - task: TerraformInstaller@0
    displayName: 'Install Terraform'
    inputs:
      terraformVersion: '$(terraformConfig.version)'

  - ${{ if parameters.unpinTerraform }}:
    # Unpin version e.g. "= 2.56" -> "~> 2.56"
    - pwsh: |
        (Get-Content ./terraform.tf) -replace " = `" *= +",' = "~> ' | Out-File terraform.tf
        Get-Content ./terraform.tf
        if (Test-Path .terraform.lock.hcl) {
          Remove-Item .terraform.lock.hcl -Force
        }
      displayName: 'Unpin Terraform provider versions'
      workingDirectory: '$(terraformDirectory)'

  - task: TerraformCLI@0
    displayName: 'Terraform init'
    inputs:
      command: 'init'
      workingDirectory: '$(terraformDirectory)'
      backendType: 'azurerm'
      backendServiceArm: '$(subscriptionConnection)'
      backendAzureRmResourceGroupName: '$(TF_STATE_RESOURCE_GROUP_NAME)'
      backendAzureRmStorageAccountName: '$(TF_STATE_STORAGE_ACCOUNT_NAME)'
      backendAzureRmContainerName: '$(TF_STATE_CONTAINER_NAME)'
      backendAzureRmKey: 'terraform.tfstate'
      allowTelemetryCollection: true

  - pwsh: |
      if ($${{ not(parameters.clear) }} -and (!((terraform output resource_suffix 2>&1) -match "Warning"))) {
        $env:TF_VAR_RESOURCE_SUFFIX = $null
        $env:TF_VAR_resource_suffix = "$(terraform output -raw resource_suffix 2>$null)"
      }

      # List environment variables
      Get-ChildItem -Path Env: -Recurse -Include ALTERNATE_*,ARM_*,AZURE_*,PIPELINE_DEMO_*,SYSTEM_*,TF_* | Sort-Object -Property Name

      # Convert uppercased Terraform environment variables to .auto.tfvars file
      foreach ($tfvar in $(Get-ChildItem -Path Env: -Recurse -Include TF_VAR_*)) {
        $terraformVariableName = $tfvar.Name.Substring(7).ToLowerInvariant()
        $terraformVariableValue = $tfVar.Value

        if ($terraformVariableValue -imatch "^\W*(true|false|\[[^\]]*\]|\{[^\}]*\})\W*$") {
          # Boolean or List, write as-is
          Write-Output "${terraformVariableName} = ${terraformVariableValue}" | Out-File ci.auto.tfvars -Append -Force
        } else {
          Write-Output "${terraformVariableName} = `"${terraformVariableValue}`"" | Out-File ci.auto.tfvars -Append -Force
        }
      } 
      Write-Host "Contents of ci.auto.tfvars:"
      Get-Content ci.auto.tfvars | Sort-Object
    name: terraformVariables
    displayName: 'Prepare Terraform variables'
    workingDirectory: '$(terraformDirectory)'

  - publish: $(terraformDirectory)
    displayName: 'Publish Terraform directory'
    artifact: $(terraformArtifactName)

  - ${{ if eq(parameters.clear, true) }}:
    - task: AzureCLI@2
      name: clear
      displayName: 'Clear Terraform state'
      inputs:
        azureSubscription: '$(subscriptionConnection)'
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |
          $(scriptDirectory)/set_terraform_azurerm_vars.ps1

          $terraformState = (terraform state pull | ConvertFrom-Json)
          if ($terraformState.resources) {
            Write-Host "Clearing Terraform state in workspace ${env:TF_WORKSPACE}..."
            $terraformState.outputs = New-Object PSObject # Empty output
            $terraformState.resources = @() # No resources
            $terraformState.serial++
            $terraformState | ConvertTo-Json | terraform state push -
          } else {
            Write-Host "No resources in Terraform state in workspace ${env:TF_WORKSPACE}..."
          }
          terraform state pull 
        addSpnToEnvironment: true
        useGlobalConfig: true
        failOnStandardError: true
        workingDirectory: '$(terraformDirectory)'

  - task: AzureCLI@2
    displayName: 'Terraform plan & apply'
    name: apply
    retryCountOnTaskFailure: ${{ parameters.retryCount }}
    inputs:
      azureSubscription: '$(subscriptionConnection)'
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |
        ./set_terraform_azurerm_vars.ps1

        terraform -chdir='$(terraformDirectory)' show -json | ConvertFrom-Json -AsHashtable | Set-Variable tfState 
        $priorResourcesExist = $tfState.ContainsKey('values')
        if ($priorResourcesExist) {
          Write-Warning "Prior resources exist in workspace '${env:TF_WORKSPACE}'"
        } else {
          Write-Host "No prior resources exist in workspace '${env:TF_WORKSPACE}'"
        }
        Write-Host "##vso[task.setvariable variable=priorResourcesExist;isOutput=true]$($priorResourcesExist.ToString().ToLower())"

        Write-Host ""
        ./deploy.ps1 -apply -force
      addSpnToEnvironment: true
      useGlobalConfig: true
      failOnStandardError: true
      workingDirectory: '$(scriptDirectory)'      

  # https://keda.sh/docs/deploy/#helm
  - ${{ if or(eq(parameters.containerEngine, 'Kubernetes'),eq(parameters.containerEngine, 'Both')) }}:
    - task: HelmDeploy@0
      displayName: "Add KEDA Helm repo"
      continueOnError: true # Treat failure as warning during destroy, we will clean up anyway
      inputs:
        connectionType: 'Azure Resource Manager'
        azureSubscription: '$(subscriptionConnection)'
        azureResourceGroup: '$(apply.resource_group_name)'
        kubernetesCluster: '$(apply.aks_name)'
        useClusterAdmin: true
        command: 'repo'
        arguments: 'add kedacore https://kedacore.github.io/charts'

  - ${{ if or(eq(parameters.containerEngine, 'Kubernetes'),eq(parameters.containerEngine, 'Both')) }}:
    - task: HelmDeploy@0
      displayName: "Update KEDA Helm repo"
      inputs:
        connectionType: 'Azure Resource Manager'
        azureSubscription: '$(subscriptionConnection)'
        azureResourceGroup: '$(apply.resource_group_name)'
        kubernetesCluster: '$(apply.aks_name)'
        useClusterAdmin: true
        command: 'repo'
        arguments: 'update'

  - ${{ if or(eq(parameters.containerEngine, 'Kubernetes'),eq(parameters.containerEngine, 'Both')) }}:
    - task: HelmDeploy@0
      displayName: "Install KEDA Helm chart"
      inputs:
        connectionType: 'Azure Resource Manager'
        azureSubscription: '$(subscriptionConnection)'
        azureResourceGroup: '$(apply.resource_group_name)'
        kubernetesCluster: '$(apply.aks_name)'
        useClusterAdmin: true
        namespace: 'keda'
        command: 'upgrade'
        chartType: 'Name'
        chartName: 'kedacore/keda'
        releaseName: 'keda'
        arguments: '--create-namespace'

  - ${{ if or(eq(parameters.containerEngine, 'Kubernetes'),eq(parameters.containerEngine, 'Both')) }}:
    - task: HelmDeploy@0
      displayName: "Deploy agent to AKS"
      inputs:
        azureSubscription: '$(subscriptionConnection)'
        azureResourceGroup: '$(apply.resource_group_name)'
        kubernetesCluster: '$(apply.aks_name)'
        useClusterAdmin: true
        command: upgrade
        chartType: FilePath
        chartPath: "helm/pipeline-keda-agents"
        releaseName: "pipeline-keda-agents"
        valueFile: "helm/pipeline-keda-agents/values.yaml,$(apply.helm_environment_values_file_abs_path)"
        overrideValues: |
          image.repository=$(apply.container_registry_name).azurecr.io/$(TF_VAR_container_repository)
          linux.azureDevOps.accessToken=$(TF_VAR_devops_pat)
          linux.azureDevOps.orgUrl=$(System.CollectionUri)
          linux.azureDevOps.capability=$(correlationCapability)
          linux.azureDevOps.poolName=$(apply.aks_agent_pool_name)
          linux.image.acrLoginServer=$(apply.container_registry_name)
          linux.podPrefix=aks-$(TF_WORKSPACE)-$(TF_VAR_resource_suffix)
          linux.trigger.poolId=$(apply.aks_agent_pool_id)
          storage.accountName=$(apply.diagnostics_storage_account_name)
          storage.accountKey=$(apply.diagnostics_storage_key)
          storage.resourceGroupName=$(apply.resource_group_name)
        waitForExecution: true

  - ${{ if or(eq(parameters.containerEngine, 'Container App'),eq(parameters.containerEngine, 'Both')) }}:
    - pwsh: |
        ./wait_for_agents.ps1 -CapabilityName PIPELINE_DEMO_JOB_CAPABILITY_ACA `
                              -CapabilityValue $(correlationCapability) `
                              -OrganizationUrl $(System.CollectionUri) `
                              -PoolId $(apply.aca_agent_pool_id)
      displayName: 'Wait for Container App agents to come online'
      workingDirectory: '$(scriptDirectory)'
      env:
        AZURE_DEVOPS_EXT_PAT: $(TF_VAR_devops_pat)

  - ${{ if or(eq(parameters.containerEngine, 'Kubernetes'),eq(parameters.containerEngine, 'Both')) }}:
    - pwsh: |
        ./wait_for_agents.ps1 -CapabilityName PIPELINE_DEMO_JOB_CAPABILITY_AKS `
                              -CapabilityValue $(correlationCapability) `
                              -OrganizationUrl $(System.CollectionUri) `
                              -PoolId $(apply.aks_agent_pool_id)
      displayName: 'Wait for Kubernetes agents to come online'
      workingDirectory: '$(scriptDirectory)'
      env:
        AZURE_DEVOPS_EXT_PAT: $(TF_VAR_devops_pat)

  - ${{ if not(eq(parameters.destroy, 'Never')) }}:
    - pwsh: |
        Write-Host "##vso[task.setvariable variable=result;isOutput=true]success"
      name: provisioningResult
      displayName: 'Indicate provisioning success'
      condition: succeeded()

- ${{ if or(eq(parameters.containerEngine, 'Container App'),eq(parameters.containerEngine, 'Both')) }}:
  - job: acaAgent
    dependsOn: provision
    displayName: Test Container App Agent
    pool:
      # name: '$(TF_VAR_pipeline_agent_pool_name)'
      name: $[ dependencies.provision.outputs['apply.aca_agent_pool_name'] ]
      demands:
      - agent.os -equals Linux
      - CONTAINER_APP_NAME
      # - CONTAINER_APP_NAME -equals $[ dependencies.provision.outputs['apply.container_app_name'] ]
      # - PIPELINE_DEMO_JOB_CAPABILITY_ACA -equals $(correlationCapability)
      # Repeat capability expression as there is no nested variable expansion inside demands
      - PIPELINE_DEMO_JOB_CAPABILITY_ACA -equals $(System.CollectionUri)$(System.TeamProject)#$(Build.DefinitionName)#$(TF_WORKSPACE)

    steps:
    - checkout: self
      retryCountOnTaskFailure: ${{ parameters.retryCount }}

    - pwsh: |
        Write-Host "`$PSVersionTable.OS"
        $PSVersionTable.OS
        Get-InstalledModule | Sort-Object -Property Name

        # List environment variables
        Get-ChildItem Env: | Sort-Object -Property Name | Format-Table
      displayName: 'Display agent info'
    - ${{ if not(eq(parameters.destroy, 'Never')) }}:
      - pwsh: |
          Write-Host "##vso[task.setvariable variable=result;isOutput=true]success"
        name: provisioningResult
        displayName: 'Indicate deployment success'
        condition: succeeded()

- ${{ if or(eq(parameters.containerEngine, 'Kubernetes'),eq(parameters.containerEngine, 'Both')) }}:
  - job: aksAgent
    dependsOn: provision
    displayName: Test Kubernetes Agent
    pool:
      # name: '$(TF_VAR_pipeline_agent_pool_name)'
      name: $[ dependencies.provision.outputs['apply.aks_agent_pool_name'] ]
      demands:
      - agent.os -equals Linux
      # - PIPELINE_DEMO_JOB_CAPABILITY_AKS -equals $(correlationCapability)
      # Repeat capability expression as there is no nested variable expansion inside demands
      - PIPELINE_DEMO_JOB_CAPABILITY_AKS -equals $(System.CollectionUri)$(System.TeamProject)#$(Build.DefinitionName)#$(TF_WORKSPACE)

    steps:
    - checkout: self
      retryCountOnTaskFailure: ${{ parameters.retryCount }}

    - pwsh: |
        Write-Host "`$PSVersionTable.OS"
        $PSVersionTable.OS
        Get-InstalledModule | Sort-Object -Property Name

        # List environment variables
        Get-ChildItem Env: | Sort-Object -Property Name | Format-Table
      displayName: 'Display agent info'
    - ${{ if not(eq(parameters.destroy, 'Never')) }}:
      - pwsh: |
          Write-Host "##vso[task.setvariable variable=result;isOutput=true]success"
        name: provisioningResult
        displayName: 'Indicate deployment success'
        condition: succeeded()
   
- ${{ if ne(parameters.destroy, 'Never') }}:
  - job: destroy
    dependsOn: 
      - provision
      - ${{ if or(eq(parameters.containerEngine, 'Container App'),eq(parameters.containerEngine, 'Both')) }}:
        - acaAgent
      - ${{ if or(eq(parameters.containerEngine, 'Kubernetes'),eq(parameters.containerEngine, 'Both')) }}:
        - aksAgent
    ${{ if eq(parameters.destroy, 'Always') }}:
      displayName: 'Destroy infrastructure'
      condition: succeededOrFailed()
    ${{ if eq(parameters.destroy, 'If no prior resources exist') }}:
      displayName: 'Destroy infrastructure (${{ lower(parameters.destroy) }})'
      condition: eq(dependencies.provision.outputs['apply.priorResourcesExist'],'false')
    ${{ if eq(parameters.destroy, 'On failure') }}:
      displayName: 'Destroy (${{ lower(parameters.destroy) }}) infrastructure'
      ${{ if eq(parameters.containerEngine, 'Container App') }}:
        condition: ne(dependencies.acaAgent.outputs['provisioningResult.result'],'success')
      ${{ if eq(parameters.containerEngine, 'Kubernetes') }}:
        condition: ne(dependencies.aksAgent.outputs['provisioningResult.result'],'success')
      ${{ if eq(parameters.containerEngine, 'Both') }}:
        condition: or(ne(dependencies.acaAgent.outputs['provisioningResult.result'],'success'),ne(dependencies.aksAgent.outputs['provisioningResult.result'],'success'))
    ${{ if eq(parameters.destroy, 'On success') }}:
      displayName: 'Destroy (${{ lower(parameters.destroy) }}) infrastructure'
      ${{ if eq(parameters.containerEngine, 'Container App') }}:
        condition: eq(dependencies.acaAgent.outputs['provisioningResult.result'],'success')
      ${{ if eq(parameters.containerEngine, 'Kubernetes') }}:
        condition: eq(dependencies.aksAgent.outputs['provisioningResult.result'],'success')
      ${{ if eq(parameters.containerEngine, 'Both') }}:
        condition: and(eq(dependencies.acaAgent.outputs['provisioningResult.result'],'success'),eq(dependencies.aksAgent.outputs['provisioningResult.result'],'success'))
    timeoutInMinutes: $[ variables['jobTimeOutMinutes'] ]

    pool:
      name: '$(pool)'
      vmImage: $(vmImage)

    variables:
      terraformDirectory: $(Agent.BuildDirectory)/$(terraformArtifactName)

    steps:
    - download: current
      displayName: 'Download Terraform workspace'
      artifact: $(terraformArtifactName)

    - bash: |
        echo Marking Terraform provider binaries as executable...
        find . | xargs chmod +x
      displayName: 'Make Terraform providers executable'
      workingDirectory: $(terraformDirectory)/.terraform/providers

    - task: TerraformCLI@0
      displayName: 'Terraform destroy (${{ lower(parameters.destroy) }})'
      continueOnError: true # Treat failure as warning during destroy, we will clean up anyway
      retryCountOnTaskFailure: ${{ parameters.retryCount }}
      inputs:
        command: 'destroy'
        workingDirectory: '$(terraformDirectory)'
        environmentServiceName: '$(subscriptionConnection)'
        runAzLogin: true
        allowTelemetryCollection: true

    - task: AzureCLI@2
      name: teardown
      displayName: 'Tear down remaining resources'
      inputs:
        azureSubscription: '$(subscriptionConnection)'
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |
          $ErrorActionPreference = "Continue" # Continue to remove resources if remove by resource group fails
          # Build JMESPath expression
          $tagQuery = "[?tags.repository == '$(TF_VAR_repository)' && tags.workspace == '$(TF_WORKSPACE)' && tags.provisionerClientId == '${env:servicePrincipalId}' && properties.provisioningState != 'Deleting'].id"
          Write-Host "Removing resources identified by `"$tagQuery`"..."

          # Remove resource groups
          $resourceGroupIDs = $(az group list --query "${tagQuery}" -o tsv)
          if ($resourceGroupIDs) {
            Write-Host "Removing resource group(s) `"${resourceGroupIDs}`"..."
            &{ # az writes information to stderr
              $ErrorActionPreference = 'SilentlyContinue'
              az resource delete --ids $resourceGroupIDs 2>&1
            }
          } else {
            Write-Host "No resource groups to remove"
          }

          # Remove (remaining) resources
          $resourceIDs = $(az resource list --query "${tagQuery}" -o tsv)
          if ($resourceIDs) {
            Write-Host "Removing resources `"${resourceIDs}`"..."
            &{ # az writes information to stderr
              $ErrorActionPreference = 'SilentlyContinue'
              az resource delete --ids $resourceIDs 2>&1
            }
          } else {
            Write-Host "No resources to remove"
          }
        addSpnToEnvironment: true
        useGlobalConfig: true
        failOnStandardError: true
        workingDirectory: '$(scriptDirectory)'

    - task: AzureCLI@2
      name: cleanup
      displayName: 'Clean up Terraform state'
      inputs:
        azureSubscription: '$(subscriptionConnection)'
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |
          $(scriptDirectory)/set_terraform_azurerm_vars.ps1

          $terraformState = (terraform state pull | ConvertFrom-Json)
          if ($terraformState.resources) {
            Write-Host "Clearing Terraform state in workspace ${env:TF_WORKSPACE}..."
            $terraformState.check_results = $null
            $terraformState.outputs = New-Object PSObject # Empty output
            $terraformState.resources = @() # No resources
            $terraformState.serial++
            $terraformState | ConvertTo-Json | terraform state push -
          } else {
            Write-Host "No resources in Terraform state in workspace ${env:TF_WORKSPACE}..."
          }
          terraform state pull 
        addSpnToEnvironment: true
        useGlobalConfig: true
        failOnStandardError: true
        workingDirectory: '$(terraformDirectory)'