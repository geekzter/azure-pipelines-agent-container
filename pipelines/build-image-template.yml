parameters:
- name: name
  displayName: Name
  type: string
  default: toolsContainer
- name: dependsOn
  type: object
  default: null
- name: displayName
  displayName: Display Name
  type: string
  default: Build container images
- name: imageTag
  displayName: Image tag
  type: string
  default: latest

jobs:
- job: ${{ parameters.name }}
  dependsOn: ${{ parameters.dependsOn }}
  displayName: ${{ parameters.displayName }}
  variables:
  - name: date
    value: $[format('{0:yyyyMMdd}', pipeline.startTime)]
  - name: 'agentImageName'
    value: pipelineagent/ubuntu-agent
  - name: 'agentToolsImageName'
    value: pipelineagent/ubuntu-agent-tools
  - name: 'agentToolsImageFQName'
    value: $(containerRegistry).azurecr.io/$(agenttoolsImageName):$(Build.BuildId)
  - name: 'devToolsImageName'
    value: pipelineagent/ubuntu-dev-tools
  - name: 'devToolsImageFQName'
    value: $(containerRegistry).azurecr.io/$(devtoolsImageName):$(Build.BuildId)
  - name: 'imageTag'
    value: ${{ parameters.imageTag }}
  pool:
    name: $[ coalesce(variables.pool,'Azure Pipelines') ]
    vmImage: $[ coalesce(variables.vmImage,'ubuntu-latest') ]
  steps:
  - task: Docker@2
    displayName: Build dev tools image
    inputs:
      command: build
      containerRegistry: '$(containerRegistryConnection)'
      Dockerfile: 'images/ubuntu-dev-tools/Dockerfile'
      repository: $(devToolsImageName)
      tags: |
        $(imageTag)
        $(date)
        $(Build.BuildId)
        $(Build.SourceBranchName)

  - task: Docker@2
    displayName: Push dev tools image
    inputs:
      command: push
      containerRegistry: '$(containerRegistryConnection)'
      repository: $(devToolsImageName)
      tags: |
        $(imageTag)
        $(date)
        $(Build.BuildId)
        $(Build.SourceBranchName)

  - task: Docker@2
    displayName: Build agent tools image
    inputs:
      arguments: '--build-arg BASE_IMAGE=$(devToolsImageFQName)'
      command: build
      containerRegistry: '$(containerRegistryConnection)'
      Dockerfile: 'images/ubuntu-agent-tools/Dockerfile'
      repository: $(agentToolsImageName)
      tags: |
        $(imageTag)
        $(date)
        $(Build.BuildId)
        $(Build.SourceBranchName)

  - task: Docker@2
    displayName: Push agent tools image
    inputs:
      command: push
      containerRegistry: '$(containerRegistryConnection)'
      repository: $(agentToolsImageName)
      tags: |
        $(imageTag)
        $(date)
        $(Build.BuildId)
        $(Build.SourceBranchName)

  - task: Docker@2
    displayName: Build agent image
    inputs:
      arguments: '--build-arg BASE_IMAGE=$(agentToolsImageFQName)'
      command: build
      containerRegistry: '$(containerRegistryConnection)'
      Dockerfile: 'images/ubuntu-agent/Dockerfile'
      repository: $(agentImageName)
      tags: |
        $(imageTag)
        $(date)
        $(Build.BuildId)
        $(Build.SourceBranchName)

  - task: Docker@2
    displayName: Push agent image
    inputs:
      command: push
      containerRegistry: '$(containerRegistryConnection)'
      repository: $(agentImageName)
      tags: |
        $(imageTag)
        $(date)
        $(Build.BuildId)
        $(Build.SourceBranchName)

  - task: AzureCLI@2
    displayName: 'Purge container images'
    continueOnError: true # Continue clean up
    inputs:
      azureSubscription: '$(subscriptionConnection)'
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |
        az acr run --cmd "acr purge --filter '$(devToolsImageName):.*'   --ago 30d --untagged" --registry $(containerRegistry) /dev/null
        az acr run --cmd "acr purge --filter '$(agentToolsImageName):.*' --ago 30d --untagged" --registry $(containerRegistry) /dev/null
        az acr run --cmd "acr purge --filter '$(agentImageName):.*'      --ago 30d --untagged" --registry $(containerRegistry) /dev/null
      addSpnToEnvironment: true
      useGlobalConfig: true
      failOnStandardError: false