parameters:
- name: containerEngine
  displayName: Container Engine
  type: string
  default: 'Container App'
  values:
  - 'Container App'
  - Kubernetes
# Test auto-scaling by setting sleep time
- name: numberOfJobs
  displayName: Number of parallel jobs to create
  type: number
  default: 1
- name: sleepTimeMinutes
  displayName: Sleep time in minutes
  type: number
  default: 0
- name: startAKSNodes
  displayName: Start AKS Nodes
  type: boolean
  default: false

trigger: none

variables:
  - group: 'container-image-info' # Should include 'aca-pool', 'aks-pool' and 'subscriptionConnection' variables
  - name: 'scriptDirectory'
    value: '$(Build.SourcesDirectory)/scripts'

jobs:
- job: createStrategy
  displayName: Create strategy
  pool:
    name: Azure Pipelines
  steps:
  - ${{ if and(parameters.startAKSNodes,eq(parameters.containerEngine, 'Kubernetes')) }}:
    - task: AzureCLI@2
      displayName: 'Start AKS Nodes'
      inputs:
        azureSubscription: '$(subscriptionConnection)'
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |
          $(scriptDirectory)/start_aks.ps1 -AgentPoolName $(aks-pool)
        failOnStandardError: true
        workingDirectory: '$(scriptDirectory)'

  - pwsh: |
      $strategyHash = @{}
      for ($i=1; $i -le ${{ parameters.numberOfJobs }}; $i++) {
        $strategyHash.Add("${i}",@{"index"=$i})
      }
      $strategyHash | ConvertTo-Json -Compress | Set-Variable strategyJson
      Write-Host $strategy
      Write-Host "##vso[task.setvariable variable=strategy;isOutput=true]${strategyJson}"
    name: pwsh
    displayName: 'Create strategy for ${{ parameters.numberOfJobs }} job(s)'

- job: ubuntuContainer
  dependsOn: createStrategy
  strategy:
    matrix: $[ dependencies.createStrategy.outputs['pwsh.strategy'] ]
    maxParallel: ${{ parameters.numberOfJobs }}
  ${{ if le(parameters.numberOfJobs, 1) }}:
    displayName: Single job
  ${{ else }}:
    displayName: Parallel job
  pool:
    ${{ if eq(parameters.containerEngine, 'Container App') }}:
      name: $[coalesce(variables['aca-pool'],variables['aks-pool'],'Default')]
    ${{ if eq(parameters.containerEngine, 'Kubernetes') }}:
      name: $[coalesce(variables['aks-pool'],variables['aca-pool'],'Default')]
    demands:
    - agent.os -equals Linux
    - KUBERNETES_SERVICE_HOST
    - ${{ if eq(parameters.containerEngine, 'Container App') }}:
      - CONTAINER_APP_NAME
  steps:
  - bash: |
      echo Hello from Ubuntu
      lsb_release -d
    displayName: 'Ubuntu info'
  - pwsh: |
      az -v
    displayName: 'Azure CLI info'
  - pwsh: |
      Write-Host "`$PSVersionTable.OS"
      $PSVersionTable.OS
      Get-InstalledModule | Sort-Object -Property Name
    displayName: 'PowerShell info'
  - pwsh: |
      terraform -v
    displayName: 'Terraform info'
  - ${{ if gt(parameters.sleepTimeMinutes, 0) }}:
    - pwsh: |
        Start-Sleep -Duration (New-TimeSpan -Minutes ${{ parameters.sleepTimeMinutes }})
      displayName: 'Sleep ${{ parameters.sleepTimeMinutes }} minutes'
