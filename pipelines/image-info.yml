parameters:
- name: containerEngine
  displayName: Container Engine
  type: string
  default: 'Container App'
  values:
  - 'Container App'
  - Kubernetes
# Test auto-scaling by setting sleep time
- name: numberOfJobs
  displayName: Number of parallel jobs to create
  type: number
  default: 1
- name: sleepTimeMinutes
  displayName: Sleep time in minutes
  type: number
  default: 0
- name: startAKSNodes
  displayName: Start Nodes
  type: boolean
  default: true
- name: workspace
  displayName: Terraform Workspace
  type: string
  default: any
  values:
  - any
  - ci
  - cd
  - cd1
  - cd2
  - cd3
  - cd3
  - test
  - test1
  - test2
  - test3

name: $(Date:yyyyMMdd)$(Rev:.r)-$(Build.DefinitionVersion)-$(SourceBranchName)-${{ parameters.workspace }}-$(Build.BuildId) (${{ parameters.containerEngine }})

resources:
  pipelines:
  - pipeline: deployment 
    source: deploy-container-agents
    trigger: true
schedules:
- cron: '0 0 * * *'
  displayName: 'Daily build (0:00 UTC)'
  # Run when there are no changes
  always: 'true'
  branches:
    include:
    - main
trigger: none

variables:
  - group: 'container-image-info' # Should 'subscriptionConnection' variables
  - group: 'container-agents-vault' # Key Vault variable group populated by Terraform. Should include '<workspace>-aca-pool', '<workspace>-aks-pool' variables.
  - name: 'scriptDirectory'
    value: '$(Build.SourcesDirectory)/scripts'
  - name: 'agentPoolVariable'
    ${{ if eq(parameters.containerEngine, 'Container App') }}:
      value: '${{ parameters.workspace }}-aca-pool-name'
    ${{ if eq(parameters.containerEngine, 'Kubernetes') }}:
      value: '${{ parameters.workspace }}-aks-pool-name'
  - name: 'agentPool'
    ${{ if eq(parameters.containerEngine, 'Container App') }}:
      ${{ if eq(parameters.workspace, 'any') }}:
        value: $[coalesce(variables['cd-aca-pool-name'],variables['cd1-aca-pool-name'],variables['cd2-aca-pool-name'],variables['cd3-aca-pool-name'],variables['test-aca-pool-name'],variables['test1-aca-pool-name'],variables['test2-aca-pool-name'],variables['test3-aca-pool-name'],variables['default-aca-pool-name'],variables['aca-pool-name'],'Default')]
      ${{ else }}:
        value: $[variables['${{ parameters.workspace }}-aca-pool-name']]
    ${{ if eq(parameters.containerEngine, 'Kubernetes') }}:
      ${{ if eq(parameters.workspace, 'any') }}:
        value: $[coalesce(variables['cd-aks-pool-name'],variables['cd1-aks-pool-name'],variables['cd2-aks-pool-name'],variables['cd3-aks-pool-name'],variables['test-aks-pool-name'],variables['test1-aks-pool-name'],variables['test2-aks-pool-name'],variables['test3-aks-pool-name'],variables['default-aks-pool-name'],variables['aks-pool-name'],'Default')]
      ${{ else }}:
        value: $[variables['${{ parameters.workspace }}-aks-pool-name']]

jobs:
- job: createStrategy
  displayName: Create strategy
  pool:
    name: Azure Pipelines
  steps:
  - ${{ if and(parameters.startAKSNodes,eq(parameters.containerEngine, 'Kubernetes')) }}:
    - task: AzureCLI@2
      displayName: 'Start AKS Nodes'
      inputs:
        azureSubscription: '$(subscriptionConnection)'
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |
          $(scriptDirectory)/start_aks.ps1 -AgentPoolName $(aks-pool)
        failOnStandardError: true
        workingDirectory: '$(scriptDirectory)'

  - pwsh: |
      # Validate whether pipeline name(s) have been set
      if ([string]::IsNullOrEmpty("$(agentPool)")) {
        Write-Error "Agent pool name not set"
      } elseif ("$(agentPool)" -ieq "Default") {
        Write-Warning "Agent pool name not set using '$(agentPoolVariable)' variable. Using 'Default' pool."
      } else {
        Write-Host "Agent pool name set using '$(agentPoolVariable)' variable. Using '$(agentPool)' pool."
      }

      Write-Host "`nCreating strategy..."
      # Create strategy
      $strategyHash = @{}
      for ($i=1; $i -le ${{ parameters.numberOfJobs }}; $i++) {
        $strategyHash.Add("${i}",@{"index"=$i})
      }
      $strategyHash | ConvertTo-Json -Compress | Set-Variable strategyJson
      Write-Host $strategy
      Write-Host "##vso[task.setvariable variable=strategy;isOutput=true]${strategyJson}"
      Write-Host "${{ parameters.numberOfJobs }} created"
    name: pwsh
    displayName: 'Create strategy for ${{ parameters.numberOfJobs }} job(s)'

- job: ubuntuContainer
  dependsOn: createStrategy
  strategy:
    matrix: $[ dependencies.createStrategy.outputs['pwsh.strategy'] ]
    maxParallel: ${{ parameters.numberOfJobs }}
  ${{ if le(parameters.numberOfJobs, 1) }}:
    displayName: Single ${{ parameters.containerEngine }} job
  ${{ else }}:
    displayName: Parallel ${{ parameters.containerEngine }} job
  pool:
    name: $(agentPool)
    demands:
    - agent.os -equals Linux
    - KUBERNETES_SERVICE_HOST
    - ${{ if eq(parameters.containerEngine, 'Container App') }}:
      - CONTAINER_APP_NAME
  steps:
  - bash: |
      echo Hello from Ubuntu
      lsb_release -d
    displayName: 'Ubuntu info'
  - pwsh: |
      az -v
    displayName: 'Azure CLI info'
  - pwsh: |
      Write-Host "`$PSVersionTable.OS"
      $PSVersionTable.OS
      Get-InstalledModule | Sort-Object -Property Name
    displayName: 'PowerShell info'
  - pwsh: |
      terraform -v
    displayName: 'Terraform info'
  - ${{ if gt(parameters.sleepTimeMinutes, 0) }}:
    - pwsh: |
        Start-Sleep -Duration (New-TimeSpan -Minutes ${{ parameters.sleepTimeMinutes }})
      displayName: 'Sleep ${{ parameters.sleepTimeMinutes }} minutes'
