parameters:
# Test auto-scaling by setting sleep time
- name: numberOfJobs
  displayName: Number of parallel jobs to create
  type: number
  default: 1
- name: sleepTimeMinutes
  displayName: Sleep time in minutes
  type: number
  default: 0
  
trigger: none

variables:
  # group: container-image-info # Should include 'pool' variable
  - name: pool
    value: 'Container Agents'

jobs:
- job: createStrategy
  displayName: Create strategy
  pool:
    name: Azure Pipelines
  steps:
  - pwsh: |
      $strategyHash = @{}
      for ($i=1; $i -le ${{ parameters.numberOfJobs }}; $i++) {
        $strategyHash.Add("${i}",@{"index"=$i})
      }
      $strategyHash | ConvertTo-Json -Compress | Set-Variable strategyJson
      Write-Host $strategy
      Write-Host "##vso[task.setvariable variable=strategy;isOutput=true]${strategyJson}"
    name: pwsh
    displayName: 'Create strategy for ${{ parameters.numberOfJobs }} job(s)'
- job: ubuntuContainer
  dependsOn: createStrategy
  strategy:
    matrix: $[ dependencies.createStrategy.outputs['pwsh.strategy'] ]
    maxParallel: ${{ parameters.numberOfJobs }}
  ${{ if le(parameters.numberOfJobs, 1) }}:
    displayName: Single job
  ${{ else }}:
    displayName: Parallel job
  pool:
    # name: $(pool)
    name: $[coalesce(variables.pool,'Default')]
    demands:
    - agent.os -equals Linux
    - PIPELINE_DEMO_APPLICATION_NAME 
  steps:
  - bash: |
      echo Hello from Ubuntu
      lsb_release -d
    displayName: 'Ubuntu info'
  - pwsh: |
      az -v
    displayName: 'Azure CLI info'
  - pwsh: |
      Write-Host "`$PSVersionTable.OS"
      $PSVersionTable.OS
      Get-InstalledModule | Sort-Object -Property Name
    displayName: 'PowerShell info'
  - pwsh: |
      terraform -v
    displayName: 'Terraform info'
  - ${{ if gt(parameters.sleepTimeMinutes, 0) }}:
    - pwsh: |
        Start-Sleep -Duration (New-TimeSpan -Minutes ${{ parameters.sleepTimeMinutes }})
      displayName: 'Sleep ${{ parameters.sleepTimeMinutes }} minutes'
