# This pipeline is for CI/CD
parameters:
- name: workspace
  displayName: Terraform Workspace (prefix in case of strategy)
  type: string
  default: ci
  values:
  - ci
  - ci1
  - ci2
  - ci3
  - cd
  - cd1
  - cd2
  - cd3
- name: asContainerJob
  displayName: Run as container job
  type: boolean
  default: true
- name: clear
  displayName: Clear State
  type: boolean
  default: false
- name: destroy
  displayName: Destroy Infrastructure
  type: string
  default: Always
  values:
  - Always
  - Never 
  - 'On failure'
  - 'On success'
- name: retryCount
  displayName: Terraform task retry count
  type: number
  default: 3
- name: testReentrance
  displayName: Test Terraform re-entrance (apply twice)
  type: boolean
  default: true
- name: unpinTerraform
  displayName: Unpin Terraform version
  type: string
  default: No
  values:
  - No
  - Yes
  - Strategy
- name: unpinTerraformProviders
  displayName: Unpin Terraform provider versions
  type: string
  default: Strategy
  values:
  - No
  - Yes
  - Strategy
- name: containerEngine
  displayName: Container Engine (ACA/AKS)
  type: string
  default: Both
  values:
  - Container App
  - Kubernetes 
  - Both

name: $(Date:yyyyMMdd)$(Rev:.r)-$(Build.DefinitionVersion)-$(SourceBranchName)-${{ parameters.workspace }}-$(Build.BuildId)

trigger: none

pr:
  autoCancel: false
  branches:
    include:
    - '*'
  drafts: false
  paths:
    exclude:
    - '.devcontainer/**'  
    - 'visuals/**'  
    - '*.md'  

schedules:
- cron: '0 0 * * Tue,Fri'
  displayName: 'Bi-weekly build (UTC)'
  # Run if there are no changes
  always: 'true'
  branches:
    include:
    - main

variables:
- group: 'build-container-agent-image' # shared with build-image.yml
  # should contain:
  # containerRegistry -> name of Container Registry Service Connection
- group: 'pipeline-container-agents' # shared with deploy-container-agents.yml
  # should contain:
  # subscriptionConnection -> name of Azure Registry Service Connection
  # TF_STATE_RESOURCE_GROUP_NAME, TF_STATE_STORAGE_ACCOUNT_NAME, TF_STATE_CONTAINER_NAME -> Terraform azurerm backend
  # (See https://developer.hashicorp.com/terraform/language/settings/backends/azurerm)
  # TF_VAR_agent_identity_resource_id -> Resource id of pre-created User-assigned Managed Identity used to access Container Registry
  # TF_VAR_container_registry_id -> Resource id of pre-created Container Registry
  # TF_VAR_devops_pat -> Personal Access Token used by agent to register itself, requires Agent Pools read & manage scope.
- name: AZURE_CORE_ONLY_SHOW_ERRORS
  value: 'true'
- name: AZURE_EXTENSION_USE_DYNAMIC_INSTALL
  value: 'yes_without_prompt'
- name: 'deploy-aks'
  value: ${{ lower(or(eq(parameters.containerEngine, 'Kubernetes'),eq(parameters.containerEngine, 'Both'))) }}
- name: 'deploy-container-app'
  value: ${{ lower(or(eq(parameters.containerEngine, 'Container App'),eq(parameters.containerEngine, 'Both'))) }}
- name: 'jobTimeOutMinutes'
  value: 180
- name: 'pool'
  value: 'Azure Pipelines'
- name: 'resourceGroup' 
  value: 'azure-pipelines-container-agents-$(TF_WORKSPACE)-$(TF_VAR_resource_suffix)'
- name: 'identityScriptDirectory'
  value: '$(Build.SourcesDirectory)/scripts/identity/scripts/azure-devops'
- name: 'scriptDirectory'
  value: '$(Build.SourcesDirectory)/scripts'
- name: 'substituteAlternateVariables'
  value: 'false'
- name: 'terraformDirectory'
  value: '$(Build.SourcesDirectory)/terraform'
- name: 'TF_IN_AUTOMATION'
  value: 'true'
- name: 'TF_INPUT'
  value: 0
- name: 'TF_VAR_configure_access_control'
  value: 'false' # Assume Azure Service Connection identity is not in Azure Owner role
- name: 'TF_VAR_container_repository'
  value: 'pipelineagent/ubuntu-agent'
- name: 'TF_VAR_container_repository'
  value: 'pipelineagent/ubuntu-agent'
- name: 'TF_VAR_create_portal_dashboard'
  value: 'false'
- name: 'TF_VAR_devops_url'
  value: '$(System.CollectionUri)'
- name: 'TF_VAR_repository'
  value: 'azure-pipelines-container-agent'
- name: 'TF_VAR_run_id'
  value: '$(Build.BuildId)'
- name: 'toolsImageFQName'
  value: $(containerRegistry).azurecr.io/pipelineagent/ubuntu-agent-tools:latest
- name: 'vmImage'
  value: 'ubuntu-latest'

jobs:
- job: createStrategy
  displayName: Create strategy
  pool:
    name: Azure Pipelines
  ${{ if parameters.asContainerJob }}:
    container:
      image: $(toolsImageFQName)
      endpoint: containerEndpoint
  steps:
  - pwsh: |
      $strategyHash = @{}
      if ($${{ not(or(eq(parameters.unpinTerraform, 'Strategy'),eq(parameters.unpinTerraformProviders, 'Strategy'),ne(variables['Build.Reason'], 'Manual'))) }}) {
        $strategyHash.Add("default",
          @{
            substituteAlternateVariables = $false
            TF_VAR_deploy_container_app = '$(deploy-container-app)'
            TF_VAR_deploy_aks = '$(deploy-aks)'
            TF_VAR_resource_suffix = '$(Build.BuildId)'
            unpinTerraform = $${{ lower(eq(parameters.unpinTerraform, 'Yes')) }}
            unpinTerraformProviders = $${{ lower(eq(parameters.unpinTerraformProviders, 'Yes')) }}
          }
        )
      } else {
        if ($$(deploy-container-app)) {
          $strategyHash.Add("aca-default",
            @{
              substituteAlternateVariables = $false
              TF_VAR_resource_suffix = '$(Build.BuildId)'
              unpinTerraform = $${{ lower(eq(parameters.unpinTerraform, 'Yes')) }}
              unpinTerraformProviders = $${{ lower(eq(parameters.unpinTerraformProviders, 'Yes')) }}
            }
          )
          $strategyHash.Add("aca-unpinned",
            @{
              substituteAlternateVariables = $true
              TF_VAR_resource_suffix = '$(Build.BuildId)'
              unpinTerraform = $${{ lower(or(eq(parameters.unpinTerraform, 'Yes'),eq(parameters.unpinTerraform, 'Strategy'))) }}
              unpinTerraformProviders = $${{ lower(or(eq(parameters.unpinTerraformProviders, 'Yes'),eq(parameters.unpinTerraformProviders, 'Strategy'),ne(variables['Build.Reason'], 'Manual'))) }}
            }
          )
          $strategyHash.Add("aca-gw-fw",
            @{
              substituteAlternateVariables = $false
              TF_VAR_aca_agent_pool_name = 'Default'
              TF_VAR_aks_agent_pool_name = 'Default'
              TF_VAR_create_agent_pools = 'false'
              TF_VAR_deploy_network = 'true'
              TF_VAR_gateway_type = 'Firewall'
              TF_VAR_resource_suffix = '$(Build.BuildId)'
              unpinTerraform = $${{ lower(eq(parameters.unpinTerraform, 'Yes')) }}
              unpinTerraformProviders = $${{ lower(eq(parameters.unpinTerraformProviders, 'Yes')) }}
            }
          )
          $strategyHash.Add("aca-gw-nat",
            @{
              substituteAlternateVariables = $false
              TF_VAR_aca_agent_pool_name = 'Default'
              TF_VAR_aks_agent_pool_name = 'Default'
              TF_VAR_create_agent_pools = 'false'
              TF_VAR_deploy_network = 'true'
              TF_VAR_gateway_type = 'NATGateway'
              TF_VAR_resource_suffix = '$(Build.BuildId)'
              unpinTerraform = $${{ lower(eq(parameters.unpinTerraform, 'Yes')) }}
              unpinTerraformProviders = $${{ lower(eq(parameters.unpinTerraformProviders, 'Yes')) }}
            }
          )
        }
        if ($$(deploy-aks)) {
          $strategyHash.Add("aks-gw-fw",
            @{
              substituteAlternateVariables = $false
              TF_VAR_aca_agent_pool_name = 'Default'
              TF_VAR_aks_agent_pool_name = 'Default'
              TF_VAR_create_agent_pools = 'false'
              TF_VAR_deploy_container_app = 'false'
              TF_VAR_deploy_aks = 'true'
              TF_VAR_deploy_bastion = 'true'
              TF_VAR_deploy_network = 'true'
              TF_VAR_gateway_type = 'Firewall'
              TF_VAR_resource_suffix = '$(Build.BuildId)'
              unpinTerraform = $${{ lower(or(eq(parameters.unpinTerraform, 'Yes'),eq(parameters.unpinTerraform, 'Strategy'))) }}
              unpinTerraformProviders = $${{ lower(or(eq(parameters.unpinTerraformProviders, 'Yes'),eq(parameters.unpinTerraformProviders, 'Strategy'),ne(variables['Build.Reason'], 'Manual'))) }}
            }
          )
          $strategyHash.Add("aks-gw-nat",
            @{
              substituteAlternateVariables = $false
              TF_VAR_aca_agent_pool_name = 'Default'
              TF_VAR_aks_agent_pool_name = 'Default'
              TF_VAR_create_agent_pools = 'false'
              TF_VAR_deploy_container_app = 'false'
              TF_VAR_deploy_aks = 'true'
              TF_VAR_deploy_network = 'true'
              TF_VAR_gateway_type = 'NATGateway'
              TF_VAR_resource_suffix = '$(Build.BuildId)'
              unpinTerraform = $${{ lower(or(eq(parameters.unpinTerraform, 'Yes'),eq(parameters.unpinTerraform, 'Strategy'))) }}
              unpinTerraformProviders = $${{ lower(or(eq(parameters.unpinTerraformProviders, 'Yes'),eq(parameters.unpinTerraformProviders, 'Strategy'),ne(variables['Build.Reason'], 'Manual'))) }}
            }
          )
        }
      }

      [int]$jobIndex = 0
      foreach ($job in $strategyHash.Keys) {
        $jobIndex++
        $workspace = "${{ parameters.workspace }}${jobIndex}"
        $strategyHash[$job].resourceGroup = "$(TF_VAR_resource_prefix)-${workspace}-$(Build.BuildId)"
        $strategyHash[$job].TF_VAR_aca_agent_pool_name ??= "aca-container-agents-${workspace}-$(Build.BuildId)"
        $strategyHash[$job].TF_VAR_aks_agent_pool_name ??= "aks-container-agents-${workspace}-$(Build.BuildId)"
        $strategyHash[$job].TF_WORKSPACE = $workspace
      }

      $strategyHash | ConvertTo-Json
      $strategyHash | ConvertTo-Json -Compress | Set-Variable strategyJson
      Write-Host "##vso[task.setvariable variable=strategy;isOutput=true]${strategyJson}"
    name: pwsh
    displayName: 'Create strategy'
    
- job: 'Provision'
  dependsOn: createStrategy
  ${{ if eq(parameters.destroy, 'Always') }}:
    displayName: 'Provision & Destroy'
  ${{ if eq(parameters.destroy, 'Never') }}:
    displayName: 'Provision'
  ${{ if eq(parameters.destroy, 'On failure') }}:
    displayName: 'Provision & Destroy (${{ lower(parameters.destroy) }})'
  ${{ if eq(parameters.destroy, 'On success') }}:
    displayName: 'Provision & Destroy (${{ lower(parameters.destroy) }})'
  condition: succeeded()
  timeoutInMinutes: $[ variables['jobTimeOutMinutes'] ]

  pool:
    name: '$(pool)'
    vmImage: $(vmImage)
  ${{ if parameters.asContainerJob }}:
    container:
      image: $(toolsImageFQName)
      endpoint: containerEndpoint

  strategy:
    matrix: $[ dependencies.createStrategy.outputs['pwsh.strategy'] ]
    maxParallel: 4

  workspace:
    clean: all

  steps:
    - checkout: self
      submodules: true

    - pwsh: |
        if ($$(unpinTerraform)) {
          $terraformVersion = 'latest'
          (Get-Content ./terraform.tf) -replace "required_version *= `" *(~>|=) +",'required_version = ">= ' | Out-File terraform.tf
          Get-Content ./terraform.tf
        } else {
          $terraformVersion = (Get-Content .terraform-version)
        }
        Write-Host "Terraform version: '${terraformVersion}'"
        Write-Host "##vso[task.setvariable variable=version;isOutput=true]${terraformVersion}"
        Copy-Item backend.tf.sample backend.tf
      name: terraformConfig
      displayName: 'Prepare Terraform config (unpinned/latest)'
      workingDirectory: '$(terraformDirectory)'

    - task: TerraformInstaller@0
      displayName: 'Install Terraform'
      inputs:
        terraformVersion: '$(terraformConfig.version)'

    - ${{ if or(eq(parameters.unpinTerraformProviders, 'Yes'),eq(parameters.unpinTerraformProviders, 'Strategy'),not(eq(variables['Build.Reason'], 'Manual'))) }}:
      # Unpin version e.g. "= 2.56" -> "~> 2.56"
      - pwsh: |
          (Get-Content ./terraform.tf) -replace " = `" *= +",' = "~> ' | Out-File terraform.tf
          Get-Content ./terraform.tf
          if (Test-Path .terraform.lock.hcl) {
            Remove-Item .terraform.lock.hcl -Force
          }
        displayName: 'Unpin Terraform provider versions'
        condition: and(succeeded(), eq(variables['unpinTerraformProviders'],'true'))
        workingDirectory: '$(terraformDirectory)'

    # - task: AzureCLI@2
    #   displayName: 'Terraform init'
    #   inputs:
    #     azureSubscription: '$(subscriptionConnection)'
    #     scriptType: pscore
    #     scriptLocation: inlineScript
    #     inlineScript: |
    #       # $(identityScriptDirectory)/set_terraform_azurerm_vars.ps1

    #       $env:TF_WORKSPACE = 'default' # Workspace may not exist yet

    #       terraform init -reconfigure `
    #                      -backend-config="resource_group_name=${env:TF_STATE_RESOURCE_GROUP_NAME}" `
    #                      -backend-config="storage_account_name=${env:TF_STATE_STORAGE_ACCOUNT_NAME}" `
    #                      -backend-config="container_name=${env:TF_STATE_CONTAINER_NAME}" `
    #                      -backend-config="key=terraform.tfstate"
    #     addSpnToEnvironment: true
    #     useGlobalConfig: true
    #     failOnStandardError: true
    #     workingDirectory: '$(terraformDirectory)'

    - task: AzureCLI@2
      displayName: 'Terraform init'
      inputs:
        azureSubscription: '$(subscriptionConnection)'
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |
          $env:TF_WORKSPACE = 'default' # Workspace may not exist yet
          Copy-Item backend.tf.sample backend.tf
          terraform init -backend-config="container_name=$(TF_STATE_BACKEND_STORAGE_CONTAINER_NAME)" `
                         -backend-config="key=terraform.tfstate" `
                         -backend-config="resource_group_name=$(TF_STATE_BACKEND_RESOURCE_GROUP_NAME)" `
                         -backend-config="storage_account_name=$(TF_STATE_BACKEND_STORAGE_ACCOUNT_NAME)" `
                         -backend-config="client_id=${env:servicePrincipalId}" `
                         -backend-config="client_secret=${env:servicePrincipalKey}" `
                         -backend-config="oidc_token=${env:idToken}" `
                         -backend-config="subscription_id=$(az account show --query id -o tsv)" `
                         -backend-config="tenant_id=${env:tenantId}"
        addSpnToEnvironment: true
        failOnStandardError: true
        workingDirectory: '$(terraformDirectory)'
      env:
        ARM_USE_AZUREAD: true

    - task: AzureCLI@2
      displayName: 'Create Terraform workspace'
      inputs:
        azureSubscription: '$(subscriptionConnection)'
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |
          # $(identityScriptDirectory)/set_terraform_azurerm_vars.ps1
          $env:TF_WORKSPACE=''
          terraform workspace select -or-create=true $(TF_WORKSPACE)
        useGlobalConfig: true
        failOnStandardError: true
        workingDirectory: '$(terraformDirectory)'
      env:
        ARM_USE_CLI: true

    - ${{ if eq(parameters.clear, true) }}:
      - task: AzureCLI@2
        name: clear
        displayName: 'Clear Terraform state'
        inputs:
          azureSubscription: '$(subscriptionConnection)'
          scriptType: pscore
          scriptLocation: inlineScript
          inlineScript: |
            # $(identityScriptDirectory)/set_terraform_azurerm_vars.ps1

            $terraformState = (terraform state pull | ConvertFrom-Json)
            if ($terraformState.resources) {
              Write-Host "Clearing Terraform state in workspace ${env:TF_WORKSPACE}..."
              $terraformState.check_results = $null
              $terraformState.outputs = New-Object PSObject # Empty output
              $terraformState.resources = @() # No resources
              $terraformState.serial++
              $terraformState | ConvertTo-Json | terraform state push -
            } else {
              Write-Host "No resources in Terraform state in workspace ${env:TF_WORKSPACE}..."
            }
            terraform state pull 
          useGlobalConfig: true
          failOnStandardError: true
          workingDirectory: '$(terraformDirectory)'
        env:
          ARM_USE_CLI: true

    - task: AzureCLI@2
      displayName: 'Prepare Terraform variables'
      inputs:
        azureSubscription: '$(subscriptionConnection)'
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |
          # $(identityScriptDirectory)/set_terraform_azurerm_vars.ps1

          Write-Host "Terraform workspace: $(terraform workspace show)"

          if ($${{ not(parameters.clear) }} -and (!((terraform output resource_suffix 2>&1) -match "Warning"))) {
            $env:TF_VAR_RESOURCE_SUFFIX = $null
            $env:TF_VAR_resource_suffix = "$(terraform output -raw resource_suffix 2>$null)"
          }

          # Parse alternate strategy variables
          if ($$(substituteAlternateVariables)) {
            foreach ($alternateVar in $(Get-ChildItem -Path Env: -Recurse -Include ALTERNATE_TF_VAR_*)) {
              $primaryTerraformVariableName = $alternateVar.Name.Substring(17).ToLowerInvariant()
              $primaryVariableName = "TF_VAR_${primaryTerraformVariableName}"
              $variableValue = $alternateVar.Value

              # Replace primary value with alternate
              Get-ChildItem -path env: -Recurse -Include $primaryVariableName | Remove-Item
              Set-Item env:${primaryVariableName} -Value $variableValue
            } 
          }

          # List environment variables
          Get-ChildItem -Path Env: -Recurse -Include ALTERNATE_*,ARM_*,AZURE_*,PIPELINE_DEMO_*,SYSTEM_*,TF_* | Sort-Object -Property Name

          # Convert uppercased Terraform environment variables to .auto.tfvars file
          foreach ($tfvar in $(Get-ChildItem -Path Env: -Recurse -Include TF_VAR_*)) {
            $terraformVariableName = $tfvar.Name.Substring(7).ToLowerInvariant()
            $terraformVariableValue = $tfVar.Value

            if ($terraformVariableValue -imatch "^\W*(true|false|\[[^\]]*\]|\{[^\}]*\})\W*$") {
              # Boolean or List, write as-is
              Write-Output "${terraformVariableName} = ${terraformVariableValue}" | Out-File ci.auto.tfvars -Append -Force
            } else {
              Write-Output "${terraformVariableName} = `"${terraformVariableValue}`"" | Out-File ci.auto.tfvars -Append -Force
            }
          } 
          Write-Host "Contents of ci.auto.tfvars:"
          Get-Content ci.auto.tfvars | Sort-Object
        failOnStandardError: true
        workingDirectory: '$(terraformDirectory)'
      env:
        ARM_USE_CLI: true

    - task: AzureCLI@2
      displayName: 'Terraform plan & apply'
      name: apply
      retryCountOnTaskFailure: ${{ parameters.retryCount }}
      inputs:
        azureSubscription: '$(subscriptionConnection)'
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |
          # $(identityScriptDirectory)/set_terraform_azurerm_vars.ps1
          ./deploy.ps1 -apply -force
          # ./deploy.ps1 -plan -force
        failOnStandardError: true
        workingDirectory: '$(scriptDirectory)'      
      env:
        ARM_USE_CLI: true

    - ${{ if parameters.testReentrance }}:
      - task: AzureCLI@2
        displayName: 'Terraform plan & apply (re-entrance test)'
        retryCountOnTaskFailure: ${{ parameters.retryCount }}
        inputs:
          azureSubscription: '$(subscriptionConnection)'
          scriptType: pscore
          scriptLocation: inlineScript
          inlineScript: |
            # $(identityScriptDirectory)/set_terraform_azurerm_vars.ps1
            ./deploy.ps1 -apply -force
            # ./deploy.ps1 -plan -force
          failOnStandardError: true
          workingDirectory: '$(scriptDirectory)'
        env:
          ARM_USE_CLI: true
          
    - ${{ if not(eq(parameters.destroy, 'Never')) }}:
      - pwsh: |
          Write-Host "##vso[task.setvariable variable=result;isOutput=true]success"
        name: provisioningResult
        displayName: 'Indicate provisioning success'
        condition: succeeded()

    - ${{ if not(eq(parameters.destroy, 'Never')) }}:
      - task: AzureCLI@2
        displayName: 'Terraform destroy (${{ lower(parameters.destroy) }})'
        ${{ if eq(parameters.destroy, 'Always') }}:
          condition: succeededOrFailed()
        ${{ if eq(parameters.destroy, 'On failure') }}:
          condition: failed()
        ${{ if eq(parameters.destroy, 'On success') }}:
          condition: succeeded()
        continueOnError: true # Treat failure as warning during destroy, we will clean up anyway
        retryCountOnTaskFailure: ${{ parameters.retryCount }}
        inputs:
          azureSubscription: '$(subscriptionConnection)'
          scriptType: pscore
          scriptLocation: inlineScript
          inlineScript: |
            # $(identityScriptDirectory)/set_terraform_azurerm_vars.ps1
            ./deploy.ps1 -destroy -force
          failOnStandardError: true
          workingDirectory: '$(scriptDirectory)'
        env:
          ARM_USE_CLI: true

    - ${{ if ne(parameters.destroy, 'Never') }}:
      - task: AzureCLI@2
        name: teardown
        displayName: 'Tear down remaining Azure resources'
        ${{ if eq(parameters.destroy, 'Always') }}:
          condition: or(always(),canceled())
        ${{ if eq(parameters.destroy, 'On failure') }}:
          condition: not(eq(variables['provisioningResult.result'],'success'))
        ${{ if eq(parameters.destroy, 'On success') }}:
          condition: eq(variables['provisioningResult.result'],'success')
        inputs:
          azureSubscription: '$(subscriptionConnection)'
          scriptType: pscore
          scriptLocation: inlineScript
          inlineScript: |
            $ErrorActionPreference = "Continue" # Continue to remove resources if remove by resource group fails
            # Build JMESPath expression
            $tagQuery = "[?tags.repository == '$(TF_VAR_repository)' && tags.workspace == '$(TF_WORKSPACE)' && tags.runId == '$(Build.BuildId)' && tags.provisionerClientId == '${env:servicePrincipalId}' && properties.provisioningState != 'Deleting'].id"
            Write-Host "Removing resources identified by `"$tagQuery`"..."

            # Remove resource groups
            $resourceGroupIDs = $(az group list --query "${tagQuery}" -o tsv)
            if ($resourceGroupIDs) {
              Write-Host "Removing resource group(s) `"${resourceGroupIDs}`"..."
              &{ # az writes information to stderr
                $ErrorActionPreference = 'SilentlyContinue'
                az resource delete --ids $resourceGroupIDs 2>&1
              }
            } else {
              Write-Host "No resource groups to remove"
            }

            # Remove (remaining) resources
            $resourceIDs = $(az resource list --query "${tagQuery}" -o tsv)
            if ($resourceIDs) {
              Write-Host "Removing resources `"${resourceIDs}`"..."
              &{ # az writes information to stderr
                $ErrorActionPreference = 'SilentlyContinue'
                az resource delete --ids $resourceIDs 2>&1
              }
            } else {
              Write-Host "No resources to remove"
            }
          failOnStandardError: true
          workingDirectory: '$(scriptDirectory)'

    - ${{ if ne(parameters.destroy, 'Never') }}:
      - pwsh: |
          ./delete_agent_pool.ps1 -OrganizationUrl $(System.CollectionUri) `
                                  -PoolName $(TF_VAR_aca_agent_pool_name), $(TF_VAR_aks_agent_pool_name)
        displayName: 'Tear down agent pools'
        ${{ if eq(parameters.destroy, 'Always') }}:
          condition: and(or(always(),canceled()),eq(coalesce(variables['TF_VAR_create_agent_pools'],'true'),'true'))
        ${{ if eq(parameters.destroy, 'On failure') }}:
          condition: and(not(eq(variables['provisioningResult.result'],'success')),eq(coalesce(variables['TF_VAR_create_agent_pools'],'true'),'true'))
        ${{ if eq(parameters.destroy, 'On success') }}:
          condition: and(eq(variables['provisioningResult.result'],'success'),eq(coalesce(variables['TF_VAR_create_agent_pools'],'true'),'true'))
        workingDirectory: '$(scriptDirectory)'
        env:
          AZURE_DEVOPS_EXT_PAT: $(TF_VAR_devops_pat)

    - ${{ if ne(parameters.destroy, 'Never') }}:
      - task: AzureCLI@2
        name: cleanup
        displayName: 'Clean up Terraform state'
        ${{ if eq(parameters.destroy, 'Always') }}:
          condition: or(always(),canceled())
        ${{ if eq(parameters.destroy, 'On failure') }}:
          condition: not(eq(variables['provisioningResult.result'],'success'))
        ${{ if eq(parameters.destroy, 'On success') }}:
          condition: eq(variables['provisioningResult.result'],'success')
        inputs:
          azureSubscription: '$(subscriptionConnection)'
          scriptType: pscore
          scriptLocation: inlineScript
          inlineScript: |
            # $(identityScriptDirectory)/set_terraform_azurerm_vars.ps1

            $terraformState = (terraform state pull | ConvertFrom-Json)
            if ($terraformState.resources) {
              Write-Host "Clearing Terraform state in workspace ${env:TF_WORKSPACE}..."
              $terraformState.outputs = New-Object PSObject # Empty output
              $terraformState.resources = @() # No resources
              $terraformState.serial++
              $terraformState | ConvertTo-Json | terraform state push -
            } else {
              Write-Host "No resources in Terraform state in workspace ${env:TF_WORKSPACE}..."
            }
            terraform state pull 
          failOnStandardError: true
          workingDirectory: '$(terraformDirectory)'
        env:
          ARM_USE_AZUREAD: true
          ARM_USE_CLI: true
