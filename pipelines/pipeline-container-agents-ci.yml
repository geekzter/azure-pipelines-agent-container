# This pipeline is for CI/CD
parameters:
- name: workspace
  displayName: Pipeline Environment / Terraform Workspace prefix
  type: string
  default: ci
  values:
  - ci
  - ci1
  - ci2
  - ci3
  - cd
  - cd1
  - cd2
  - cd3
- name: clear
  displayName: Clear State
  type: boolean
  default: false
- name: destroy
  displayName: Destroy Infrastructure
  type: string
  default: Always
  values:
  - Always
  - Never 
  - 'On failure'
  - 'On success'
- name: retryCount
  displayName: Terraform task retry count
  type: number
  default: 1
- name: testReentrance
  displayName: Test Terraform re-entrance (apply twice)
  type: boolean
  default: true
- name: unpinTerraform
  displayName: Unpin Terraform version
  type: boolean
  default: false
- name: unpinTerraformProviders
  displayName: Unpin Terraform provider versions
  type: string
  default: No
  values:
  - No
  - Yes
  - Strategy

name: $(Date:yyyyMMdd)$(Rev:.r)-$(Build.DefinitionVersion)-$(SourceBranchName)-${{ parameters.workspace }}-$(Build.BuildId)

trigger: none

pr:
  autoCancel: false
  branches:
    include:
    - '*'
  drafts: false
  paths:
    exclude:
    - '.devcontainer/**'  
    - 'visuals/**'  
    - '*.md'  

schedules:
- cron: '0 0 * * Mon,Thu'
  displayName: 'Bi-weekly build (UTC)'
  # Run if there are no changes
  always: 'true'
  branches:
    include:
    - main

variables:
- group: 'pipeline-container-agents-ci'
- name: 'jobTimeOutMinutes'
  value: 180
- name: 'repository'
  value: 'azure-pipelines-container-agents'
- name: AZURE_CORE_ONLY_SHOW_ERRORS
  value: 'true'
- name: AZURE_EXTENSION_USE_DYNAMIC_INSTALL
  value: 'yes_without_prompt'
- name: 'substituteAlternateVariables'
  value: 'false'
- name: 'TF_IN_AUTOMATION'
  value: 'true'
- name: 'TF_INPUT'
  value: 0
- name: 'scriptDirectory'
  value: '$(Build.SourcesDirectory)/scripts'
- name: 'terraformDirectory'
  value: '$(Build.SourcesDirectory)/terraform'
- name: 'TF_VAR_run_id'
  value: '$(Build.BuildId)'

- name: 'resourceGroup' 
  value: 'azure-pipelines-container-agents-$(TF_WORKSPACE)-$(TF_VAR_resource_suffix)'

jobs:
- job: createStrategy
  displayName: Create strategy
  pool:
    name: Azure Pipelines
  steps:
  - pwsh: |
      $strategyHash = @{}
      if ($${{ not(or(eq(parameters.unpinTerraformProviders, 'Strategy'),ne(variables['Build.Reason'], 'Manual'))) }}) {
        $strategyHash.Add("primary",@{
            resourceGroup = '$(TF_VAR_resource_prefix)-${{ parameters.workspace }}-$(Build.BuildId)'
            terraformArtifactPrefix = 'terraformPrimary'
            substituteAlternateVariables = $false
            TF_VAR_resource_suffix = '$(Build.BuildId)'
            TF_WORKSPACE = '${{ parameters.workspace }}'
            unpinTerraformProviders = $${{ lower(eq(parameters.unpinTerraformProviders, 'Yes')) }}
          }
        )
      } else {
        $strategyHash.Add("primary",@{
            resourceGroup = '$(TF_VAR_resource_prefix)-${{ parameters.workspace }}a-$(Build.BuildId)'
            terraformArtifactPrefix = 'terraformPrimary'
            substituteAlternateVariables = $false
            TF_VAR_resource_suffix = '$(Build.BuildId)'
            TF_WORKSPACE = '${{ parameters.workspace }}a'
            unpinTerraformProviders = $${{ lower(eq(parameters.unpinTerraformProviders, 'Yes')) }}
          }
        )
        $strategyHash.Add("alternate",@{
            resourceGroup = '$(TF_VAR_resource_prefix)-${{ parameters.workspace }}b-$(Build.BuildId)'
            terraformArtifactPrefix = 'terraformAlternate'
            substituteAlternateVariables = $true
            TF_VAR_resource_suffix = '$(Build.BuildId)'
            TF_WORKSPACE = '${{ parameters.workspace }}b'
            unpinTerraformProviders = $${{ lower(or(eq(parameters.unpinTerraformProviders, 'Yes'),eq(parameters.unpinTerraformProviders, 'Strategy'),ne(variables['Build.Reason'], 'Manual'))) }}
          }
        )
      }
      $strategyHash | ConvertTo-Json
      $strategyHash | ConvertTo-Json -Compress | Set-Variable strategyJson
      Write-Host "##vso[task.setvariable variable=strategy;isOutput=true]${strategyJson}"
    name: pwsh
    displayName: 'Create strategy'
    
- job: 'Provision'
  dependsOn: createStrategy
  ${{ if eq(parameters.destroy, 'Always') }}:
    displayName: 'Provision & Destroy'
  ${{ if eq(parameters.destroy, 'Never') }}:
    displayName: 'Provision'
  ${{ if eq(parameters.destroy, 'On failure') }}:
    displayName: 'Provision & Destroy (${{ lower(parameters.destroy) }})'
  ${{ if eq(parameters.destroy, 'On success') }}:
    displayName: 'Provision & Destroy (${{ lower(parameters.destroy) }})'
  condition: succeeded()
  timeoutInMinutes: $[ variables['jobTimeOutMinutes'] ]

  pool:
    name: '$(pool)'
    vmImage: $(vmImage)

  # ${{ if or(eq(parameters.unpinTerraformProviders, 'Strategy'),ne(variables['Build.Reason'], 'Manual')) }}:
  strategy:
    matrix: $[ dependencies.createStrategy.outputs['pwsh.strategy'] ]
      # # alternate:
      # #   resourceGroup: '$(TF_VAR_resource_prefix)-${{ parameters.workspace }}b-$(Build.BuildId)'
      # #   terraformArtifactPrefix: 'terraformAlternate'
      # #   substituteAlternateVariables: true
      # #   TF_VAR_resource_suffix: '$(Build.BuildId)'
      # #   TF_WORKSPACE: '${{ parameters.workspace }}b'
      # #   unpinTerraformProviders: ${{ lower(or(eq(parameters.unpinTerraformProviders, 'Yes'),eq(parameters.unpinTerraformProviders, 'Strategy'),ne(variables['Build.Reason'], 'Manual'))) }}
      # primary:
      #   resourceGroup: '$(TF_VAR_resource_prefix)-${{ parameters.workspace }}a-$(Build.BuildId)'
      #   terraformArtifactPrefix: 'terraformPrimary'
      #   substituteAlternateVariables: false
      #   TF_VAR_resource_suffix: '$(Build.BuildId)'
      #   TF_WORKSPACE: '${{ parameters.workspace }}a'
      #   unpinTerraformProviders: ${{ lower(eq(parameters.unpinTerraformProviders, 'Yes')) }}
    maxParallel: 2

  # variables:
  # - group: '$(variableGroup)'
    # ${{ if not(or(eq(parameters.unpinTerraformProviders, 'Strategy'),ne(variables['Build.Reason'], 'Manual'))) }}:
    #   # Not running as strategy
    #   terraformArtifactPrefix: 'terraformPrimary'
    #   ${{ if parameters.clear }}:  # Don't reset suffix if we want to keep existing resources
    #     TF_VAR_resource_suffix: '$(Build.BuildId)'
    #   TF_WORKSPACE: '${{ parameters.workspace }}'
    #   unpinTerraformProviders: ${{ lower(eq(parameters.unpinTerraformProviders, 'Yes')) }}
    #   resourceGroup: '$(TF_VAR_resource_prefix)-${{ parameters.workspace }}-$(Build.BuildId)'

  workspace:
    clean: all

  steps:
    - ${{ if not(parameters.unpinTerraform) }}:
      - pwsh: |
          $terraformVersion = (Get-Content .terraform-version)
          Write-Host "##vso[task.setvariable variable=version;isOutput=true]${terraformVersion}"
          Copy-Item backend.tf.sample backend.tf
        name: terraformConfig
        displayName: 'Prepare Terraform config (pinned)'
        workingDirectory: '$(terraformDirectory)'
    - ${{ if parameters.unpinTerraform }}:
      - pwsh: |
          (Get-Content ./provider.tf) -replace "required_version *= `" *(~>|=) +",'required_version = ">= ' | Out-File provider.tf
          Get-Content ./provider.tf
          Write-Host "##vso[task.setvariable variable=version;isOutput=true]latest"
          Copy-Item backend.tf.sample backend.tf
        name: terraformConfig
        displayName: 'Prepare Terraform config (unpinned/latest)'
        workingDirectory: '$(terraformDirectory)'

    - task: TerraformInstaller@0
      displayName: 'Install Terraform'
      inputs:
        terraformVersion: '$(terraformConfig.version)'

    # - ${{ if or(eq(parameters.unpinTerraformProviders, 'Yes'),eq(parameters.unpinTerraformProviders, 'Strategy'),not(eq(variables['Build.Reason'], 'Manual'))) }}:
    #   # Unpin version e.g. "= 2.56" -> "~> 2.56"
    #   - pwsh: |
    #       (Get-Content ./provider.tf) -replace " = `" *= +",' = "~> ' | Out-File provider.tf
    #       Get-Content ./provider.tf
    #       if (Test-Path .terraform.lock.hcl) {
    #         Remove-Item .terraform.lock.hcl -Force
    #       }
    #     displayName: 'Unpin Terraform provider versions'
    #     # condition required as '- ${{ if ' template expression is not evaluated when using a strategy
    #     condition: and(succeeded(), eq(variables['unpinTerraformProviders'],'true'))
    #     workingDirectory: '$(terraformDirectory)'

    # - task: TerraformCLI@0
    #   displayName: 'Terraform init'
    #   inputs:
    #     command: 'init'
    #     workingDirectory: '$(terraformDirectory)'
    #     backendType: 'azurerm'
    #     backendServiceArm: '$(subscriptionConnection)'
    #     backendAzureRmResourceGroupName: '$(TF_STATE_RESOURCE_GROUP_NAME)'
    #     backendAzureRmStorageAccountName: '$(TF_STATE_STORAGE_ACCOUNT_NAME)'
    #     backendAzureRmContainerName: '$(TF_STATE_CONTAINER_NAME)'
    #     backendAzureRmKey: 'terraform.tfstate'
    #     allowTelemetryCollection: true

    # - publish: $(terraformDirectory)
    #   displayName: 'Publish Terraform workspace'
    #   artifact: $(terraformArtifactPrefix)$(System.PlanId)

    # - ${{ if eq(parameters.clear, true) }}:
    #   - task: AzureCLI@2
    #     name: clear
    #     displayName: 'Clear Terraform state'
    #     inputs:
    #       azureSubscription: '$(subscriptionConnection)'
    #       scriptType: pscore
    #       scriptLocation: inlineScript
    #       inlineScript: |
    #         $(scriptDirectory)/set_terraform_azurerm_vars.ps1

    #         $terraformState = (terraform state pull | ConvertFrom-Json)
    #         if ($terraformState.resources) {
    #           Write-Host "Clearing Terraform state in workspace ${env:TF_WORKSPACE}..."
    #           $terraformState.outputs = New-Object PSObject # Empty output
    #           $terraformState.resources = @() # No resources
    #           $terraformState.serial++
    #           $terraformState | ConvertTo-Json | terraform state push -
    #         } else {
    #           Write-Host "No resources in Terraform state in workspace ${env:TF_WORKSPACE}..."
    #         }
    #         terraform state pull 
    #       addSpnToEnvironment: true
    #       useGlobalConfig: true
    #       failOnStandardError: true
    #       workingDirectory: '$(terraformDirectory)'

    # - pwsh: |
    #     if ($${{ not(parameters.clear) }} -and (!((terraform output resource_suffix 2>&1) -match "Warning"))) {
    #       $env:TF_VAR_RESOURCE_SUFFIX = $null
    #       $env:TF_VAR_resource_suffix = "$(terraform output -raw resource_suffix 2>$null)"
    #     }

    #     # Parse alternate strategy variables
    #     if ($$(substituteAlternateVariables)) {
    #       foreach ($alternateVar in $(Get-ChildItem -Path Env: -Recurse -Include ALTERNATE_TF_VAR_*)) {
    #         $primaryTerraformVariableName = $alternateVar.Name.Substring(17).ToLowerInvariant()
    #         $primaryVariableName = "TF_VAR_${primaryTerraformVariableName}"
    #         $variableValue = $alternateVar.Value

    #         # Replace primary value with alternate
    #         Get-ChildItem -path env: -Recurse -Include $primaryVariableName | Remove-Item
    #         Set-Item env:${primaryVariableName} -Value $variableValue
    #       } 
    #     }

    #     # List environment variables
    #     Get-ChildItem -Path Env: -Recurse -Include ALTERNATE_*,ARM_*,AZURE_*,PIPELINE_DEMO_*,SYSTEM_*,TF_* | Sort-Object -Property Name

    #     # Convert uppercased Terraform environment variables to .auto.tfvars file
    #     foreach ($tfvar in $(Get-ChildItem -Path Env: -Recurse -Include TF_VAR_*)) {
    #       $terraformVariableName = $tfvar.Name.Substring(7).ToLowerInvariant()
    #       $terraformVariableValue = $tfVar.Value

    #       if ($terraformVariableValue -imatch "^\W*(true|false|\[[^\]]*\]|\{[^\}]*\})\W*$") {
    #         # Boolean or List, write as-is
    #         Write-Output "${terraformVariableName} = ${terraformVariableValue}" | Out-File ci.auto.tfvars -Append -Force
    #       } else {
    #         Write-Output "${terraformVariableName} = `"${terraformVariableValue}`"" | Out-File ci.auto.tfvars -Append -Force
    #       }
    #     } 
    #     Write-Host "Contents of ci.auto.tfvars:"
    #     Get-Content ci.auto.tfvars | Sort-Object
    #   name: terraformVariables
    #   displayName: 'Prepare Terraform variables'
    #   workingDirectory: '$(terraformDirectory)'

    # - task: AzureCLI@2
    #   displayName: 'Terraform plan & apply (deploy_firewall:$(TF_VAR_deploy_firewall))'
    #   name: apply
    #   retryCountOnTaskFailure: ${{ parameters.retryCount }}
    #   inputs:
    #     azureSubscription: '$(subscriptionConnection)'
    #     scriptType: pscore
    #     scriptLocation: inlineScript
    #     inlineScript: |
    #       ./set_terraform_azurerm_vars.ps1
    #       ./deploy.ps1 -apply -force
    #     addSpnToEnvironment: true
    #     useGlobalConfig: true
    #     failOnStandardError: true
    #     workingDirectory: '$(scriptDirectory)'      

    # - ${{ if parameters.testReentrance }}:
    #   - task: AzureCLI@2
    #     displayName: 'Terraform plan & apply (re-entrance test)'
    #     retryCountOnTaskFailure: ${{ parameters.retryCount }}
    #     inputs:
    #       azureSubscription: '$(subscriptionConnection)'
    #       scriptType: pscore
    #       scriptLocation: inlineScript
    #       inlineScript: |
    #         ./set_terraform_azurerm_vars.ps1

    #         # Swap NAT Gateway <-> Azure Firewall
    #         # $env:TF_VAR_deploy_firewall = ($env:TF_VAR_deploy_firewall -ieq "true" ? "false" : "true")
    #         ./deploy.ps1 -apply -force
    #       addSpnToEnvironment: true
    #       useGlobalConfig: true
    #       failOnStandardError: true
    #       workingDirectory: '$(scriptDirectory)'
          
    # - ${{ if not(eq(parameters.destroy, 'Never')) }}:
    #   - pwsh: |
    #       Write-Host "##vso[task.setvariable variable=result;isOutput=true]success"
    #     name: provisioningResult
    #     displayName: 'Indicate provisioning success'
    #     condition: succeeded()

    # - ${{ if not(eq(parameters.destroy, 'Never')) }}:
    #   - task: TerraformCLI@0
    #     displayName: 'Terraform destroy (${{ lower(parameters.destroy) }})'
    #     ${{ if eq(parameters.destroy, 'Always') }}:
    #       condition: succeededOrFailed()
    #     ${{ if eq(parameters.destroy, 'On failure') }}:
    #       condition: failed()
    #     ${{ if eq(parameters.destroy, 'On success') }}:
    #       condition: succeeded()
    #     continueOnError: true # Treat failure as warning during destroy, we will clean up anyway
    #     retryCountOnTaskFailure: ${{ parameters.retryCount }}
    #     inputs:
    #       command: 'destroy'
    #       workingDirectory: '$(terraformDirectory)'
    #       environmentServiceName: '$(subscriptionConnection)'
    #       runAzLogin: true
    #       allowTelemetryCollection: true

    # - ${{ if ne(parameters.destroy, 'Never') }}:
    #   - task: AzureCLI@2
    #     name: teardown
    #     displayName: 'Tear down remaining resources'
    #     ${{ if eq(parameters.destroy, 'Always') }}:
    #       condition: or(always(),canceled())
    #     ${{ if eq(parameters.destroy, 'On failure') }}:
    #       condition: not(eq(variables['provisioningResult.result'],'success'))
    #     ${{ if eq(parameters.destroy, 'On success') }}:
    #       condition: eq(variables['provisioningResult.result'],'success')
    #     inputs:
    #       azureSubscription: '$(subscriptionConnection)'
    #       scriptType: pscore
    #       scriptLocation: inlineScript
    #       inlineScript: |
    #         $ErrorActionPreference = "Continue" # Continue to remove resources if remove by resource group fails
    #         # Build JMESPath expression
    #         $tagQuery = "[?tags.repository == '$(repository)' && tags.workspace == '$(TF_WORKSPACE)' && tags.runid == '$(Build.BuildId)' && properties.provisioningState != 'Deleting'].id"
    #         Write-Host "Removing resources identified by `"$tagQuery`"..."

    #         # Remove resource groups
    #         $resourceGroupIDs = $(az group list --query "${tagQuery}" -o tsv)
    #         if ($resourceGroupIDs) {
    #           Write-Host "Removing resource group(s) `"${resourceGroupIDs}`"..."
    #           &{ # az writes information to stderr
    #             $ErrorActionPreference = 'SilentlyContinue'
    #             az resource delete --ids $resourceGroupIDs 2>&1
    #           }
    #         } else {
    #           Write-Host "No resource groups to remove"
    #         }

    #         # Remove (remaining) resources
    #         $resourceIDs = $(az resource list --query "${tagQuery}" -o tsv)
    #         if ($resourceIDs) {
    #           Write-Host "Removing resources `"${resourceIDs}`"..."
    #           &{ # az writes information to stderr
    #             $ErrorActionPreference = 'SilentlyContinue'
    #             az resource delete --ids $resourceIDs 2>&1
    #           }
    #         } else {
    #           Write-Host "No resources to remove"
    #         }
    #       addSpnToEnvironment: true
    #       useGlobalConfig: true
    #       failOnStandardError: true
    #       workingDirectory: '$(scriptDirectory)'

    # - ${{ if ne(parameters.destroy, 'Never') }}:
    #   - task: AzureCLI@2
    #     name: cleanup
    #     displayName: 'Clean up Terraform state'
    #     ${{ if eq(parameters.destroy, 'Always') }}:
    #       condition: or(always(),canceled())
    #     ${{ if eq(parameters.destroy, 'On failure') }}:
    #       condition: not(eq(variables['provisioningResult.result'],'success'))
    #     ${{ if eq(parameters.destroy, 'On success') }}:
    #       condition: eq(variables['provisioningResult.result'],'success')
    #     inputs:
    #       azureSubscription: '$(subscriptionConnection)'
    #       scriptType: pscore
    #       scriptLocation: inlineScript
    #       inlineScript: |
    #         $(scriptDirectory)/set_terraform_azurerm_vars.ps1

    #         $terraformState = (terraform state pull | ConvertFrom-Json)
    #         if ($terraformState.resources) {
    #           Write-Host "Clearing Terraform state in workspace ${env:TF_WORKSPACE}..."
    #           $terraformState.outputs = New-Object PSObject # Empty output
    #           $terraformState.resources = @() # No resources
    #           $terraformState.serial++
    #           $terraformState | ConvertTo-Json | terraform state push -
    #         } else {
    #           Write-Host "No resources in Terraform state in workspace ${env:TF_WORKSPACE}..."
    #         }
    #         terraform state pull 
    #       addSpnToEnvironment: true
    #       useGlobalConfig: true
    #       failOnStandardError: true
    #       workingDirectory: '$(terraformDirectory)'
